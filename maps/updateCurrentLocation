//src: http://developer.android.com/training/location/receive-location-updates.html

To get updates in location, 
1. need to implement a LocationListener
2. Specify when to update (update parameters)


[0] setup 0setup and currentLocation

[1] Define LocationChanged Listener and LocationRequest object

public class MainActivity extends Activity implements
	GooglePlayServicesClient.ConnectionCallbacks,
	GooglePlayServicesClient.OnConnectionFailedListener,
	LocationListener {
  ...

  LocationRequest mLocationRequest;

  @Override
  public void onLocationChanged(Location location){
    LatLng new position = new LatLng(location.getLatitude(), location.getLongitude());
  }
}

[2] Specify Update Parameters

LocationRequest object {
  Interval between updates
  Location Accuracy
}


-------
To update interval:

  LocationRequest.setInterval() //in milliseconds

Note: Recommended: You can also set Fastest updateinterval:

  LocationRequest.setFastestInterval: 
    sets fastest rate at which your app can handle location updates. 
    Sets an upper limit to the update rate.

  + Why is it important?
      Other apps may affect the rate at which updates are sent. 
      If the rate you set is too fast for app to handle, 
        you may encounter problems with UI flicker or data overflow.

-------
Some example parameters:

    private static final int MILLISECONDS_PER_SECOND = 1000;
    public static final int UPDATE_INTERVAL_IN_SECONDS = 5;
    // Update frequency in milliseconds
    private static final long UPDATE_INTERVAL =
            MILLISECONDS_PER_SECOND * UPDATE_INTERVAL_IN_SECONDS;
    private static final int FASTEST_INTERVAL_IN_SECONDS = 1;
    // A fast frequency ceiling in milliseconds
    private static final long FASTEST_INTERVAL =
            MILLISECONDS_PER_SECOND * FASTEST_INTERVAL_IN_SECONDS;

-------
Set Accuracy parameter by calling setPriority(param)
	LocationRequest.PRIORITY_HIGH_ACCURACY

mLocationRequest = LocationRequest.create();
mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
mLocationRequest.setInterval(UPDATE_INTERVAL);
mLocationRequest.setFastestInterval(FASTEST_INTERVAL);

[3] Start Location updates by creating your locationClient in onCreate(). Connect it and make request by calling requestLocationUpdates()
	Setup in currentLocation()

LocationClient mLocationClient;
boolean mUpdatesRequested;

//This implementation allows clients to turn off location updates in shared preferences


@Override protected void onCreate(Bundle savedInstanceState){
  //open shared preferences
  mPref  = getSharedPreferences("SharedPreferences", Context.MODE_PRIVATE);
  //Get SharedPreferences editor
  mEditor = mPrefs.edit();
  /*
    Create new location client. use enclosing class to handle callbacks.
  */
  mLocationClient = new LocationClient(this, this, this);
  //Start with updates turned off
  mUpdatesRequested = false;
}

@Override 
protected void onPause(){
  mEditor.putBoolean("KEY_UPDATES_ON", mUpdatesRequested); 
  mEditor.commit();
  super.onPause();
}

@Override
protected void onStart() {
  ...
  mLocationClient.connect();
}

@Override
protected void onResume(){
  /*
    Get previous setting for location updates. False if error occurs
  */
  if (mPrefs.contains("KEY_UPDATES_ON")){
    mUpdatesRequested = mPrefs.getBoolean("KEY_UPDATES_ON", false);
  } else {
    mEditor.putBoolean("KEY_UPDATES_ON", false);
    mEditor.commit();
  }
}

@Override
public void onConnected(Bundle dataBundle){
  if (mUpdatesRequested){
	//If already requested, start periodic updates
    mLocationClient.requestLocationUpdates(mLocationRequest, this);
  }
}

[4] Stop Location Updates
Save state of update flag in onPause()
stop updates in onStop() by calling removeLocationUpdates(LocationListener)

@Override
protected void onStop(){
  if (mLocationClient.isConnected()){
    removeLocationUpdates(this);
  } 
  mLocationClient.disconnect();
  super.onStop();
}
