Scenario 1: 
  Act1 EditText takes user input. When user clicks 'confirm', Act1 starts up Act2 and passes it the user's input.


public class MainActivity extends ActionBarActivity {
    public final static String EXTRA_MESSAGE = "com.example.myfirstapp.MESSAGE";
    ...
}


Scenario 2:

Act1 --> Act2 --> ?
  ^               +--------> Act3 ?
  |_______________|

From Act1
[1] To pass data from an activity to another, we can package the data in a bundle (if there is lots), and add it to the Intent.

[2] Or we can pass some data indirectly to the bundle by attaching it to the Intent as an 'EXTRA'

Think of the bundle sort of like a hash. { 'key' => 'value', 'key1' => 'value2' }


  Intent i = new Intent(this, NoteEdit.class);
  i.putExtra(NotesDbAdapter.KEY_ROWID, id);
  i.putExtra(NotesDbAdapter.KEY_TITLE, c.getString(
          c.getColumnIndexOrThrow(NotesDbAdapter.KEY_TITLE)));
  i.putExtra(NotesDbAdapter.KEY_BODY, c.getString(
          c.getColumnIndexOrThrow(NotesDbAdapter.KEY_BODY)));
  startActivity(i); 
  //vs. (**Check below**) startActivityForREsult(i, ACTIVITY_EDIT_CODE)
  
//putExtra() is the method to add items into the Bundle 
// to pass in to intent invocations. 
// Here, we are using the Bundle 
//   to pass in the title, body and mRowId 
//   of the note we want to edit. 


At Act2, maybe we want to take a look at the data bundled from Act1
  mRowId = null;
  Bundle extras = getIntent().getExtras();
  if (extras != null) {
      String title = extras.getString(NotesDbAdapter.KEY_TITLE);
      String body = extras.getString(NotesDbAdapter.KEY_BODY);
      mRowId = extras.getLong(NotesDbAdapter.KEY_ROWID);
  
      if (title != null) {
          mTitleText.setText(title);
      }
      if (body != null) {
          mBodyText.setText(body);
      }
  }

  ///... after you finish what you need to do on Act2... 

  extras.putString(NotesDbAdapter.KEY_TITLE,
                     mTitleText.getText().toString());
  extras.putString(NotesDbAdapter.KEY_BODY,
                     mBodyText.getText().toString());
  if (mRowId != null) {
      extras.putLong(NotesDbAdapter.KEY_ROWID, mRowId);
  }
  //go back to Act1 with Bundle
  Intent mIntent = new Intent();
  mIntent.putExtras(bundle);
  
//Some SQL Queries shown

 if (mRowId != null){
     try {
         Cursor note = mDbHelper.fetchNote(mRowId);
         startManagingCursor(note);
         mTitleText.setText(note.getString(note.getColumnIndexOrThrow(NotesDbAdapter.KEY_TITLE)));
         mBodyText.setText(note.getString(note.getColumnIndexOrThrow(NotesDbAdapter.KEY_BODY)));
     } catch (SQLException e){}
 }

















[Addendum]
Scenario: if we use startActivityForResult(...) to launch Act2
If we use startActivityForResult, Act2 will return to Act1 with a result and  call onActivityResult() 

Problem with this implementation: App is not prepared to deal with user hitting back button in Act2. This implementation relies on user hitting 'confirm' when done. O/w app will crash. 

Why? Act1 expects a bundle to be passed back from Act2. If hit back button, bundle is not prepared.

Future solution: Take data saving logic out from activity. Use a proper life cycle instead.

But, read on to be enlightened:

//Act1's onActivityResult
... onActivityResult(){
    super.onActivityResult(requestCode, resultCode, intent);
    Bundle extras = intent.getExtras();
    
    switch(requestCode) {
    case ACTIVITY_CREATE:
        String title = extras.getString(NotesDbAdapter.KEY_TITLE);
        String body = extras.getString(NotesDbAdapter.KEY_BODY);
        mDbHelper.createNote(title, body);
        fillData();
        break;
    case ACTIVITY_EDIT:
        Long mRowId = extras.getLong(NotesDbAdapter.KEY_ROWID);
        if (mRowId != null) {
            String editTitle = extras.getString(NotesDbAdapter.KEY_TITLE);
            String editBody = extras.getString(NotesDbAdapter.KEY_BODY);
            mDbHelper.updateNote(mRowId, editTitle, editBody);
        }
        fillData();
        break;
    }
}

//Act1 called Act2 by startActivityForResult(Intent i)
    //in this ex. we are in Act2. User finishes editing a note.
    //we pass back the info from Act2 to Act1 by using a bundle

/* Activity2.java */
... onCreate() {
  mRowId = null;
  Bundle extras = getIntent().getExtras();
  if (extras != null) {
      String title = extras.getString(NotesDbAdapter.KEY_TITLE);
      String body = extras.getString(NotesDbAdapter.KEY_BODY);
      mRowId = extras.getLong(NotesDbAdapter.KEY_ROWID);
  
      if (title != null) {
          mTitleText.setText(title);
      }
      if (body != null) {
          mBodyText.setText(body);
      }
  }
  Button confirmButton = (Button) findViewById(R.id.confirm_button)
  confirmButton.setOnClickListener(new View.OnClickListener() {
      public void onClick(View view) {
        Bundle bundle = new Bundle();
        bundle.putString(NotesDbAdapter.KEY_TITLE, 
                           mTitleText.getText().toString());
        bundle.putString(NotesDbAdapter.KEY_BODY, 
                           mBodyText.getText().toString());
        if (mRowId != null) {
            bundle.putLong(NotesDbAdapter.KEY_ROWID, mRowId);
        }
        //go back to Act1 with Bundle
        Intent mIntent = new Intent();
        mIntent.putExtras(bundle);
        setResult(RESULT_OK, mIntent);
        finish(); 
      }
  });
}
