//very helpful src of how adapter is refreshed:
http://stackoverflow.com/questions/12229817/android-how-does-notifydatasetchanged-method-and-listviews-work

//src: http://developer.android.com/guide/topics/ui/declaring-layout.html#AdapterViews

Use if: content for layout is dynamic or not pre-determined.
	Want to populate the layout with views at runtime.

Need a layout that subclasses the AdapterView class
	>> Use an Adapter to bind data to its layout.

Layout examples:
ListView, GridView

To populate:
bind AdapterView instance to an Adapter (which retrieves ata from external source. creates a View for each data entry)

Popular Adapters:
ArrayAdapter (works for Strings only)
	for array data sources. 
	view is created by callign toString() on each.
	  >> contents placed into a TextView
Override options:
[1] IF want object appearance to change, override MyObject.toString()
[2] To create a view other than a TextView (maybe want ImageView), extend ArrayDapter class and override getView() to retun the type of view you want for each item

SimpleCursorAdapter (works if data comes form a Cursor)
+ Must specify layout to use for each row in Cursor
+ Must specify which columns in Cursor can be inserted into which views of the layout
	eg) create list of people's name + phone
String[] fromColumns = {ContactsContract.Data.DISPLAY_NAME,
                        ContactsContract.CommonDataKinds.Phone.NUMBER};
int[] toViews = {R.id.display_name, R.id.phone_number};

When instantiating SimpleCursorAdapter, choose what layout to use for each result, what Cursor to draw results from, and the from[] and to[] arrays

SimpleCursorAdapter adapter = new SimpleCursorAdapter(this,
        R.layout.person_name_and_number, cursor, fromColumns, toViews, 0);
ListView listView = getListView();
listView.setAdapter(adapter);



eg) ListView for string array 
/**
* @param context (this in this case)
* @param layout that contains a TextView for each MyObject in array
* @param MyObjectClassArray
*/
ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, myStringArray);

ListView listView = (ListView) findViewById(R.id.listview);
listView.setAdapter(adapter);


If data pool changed, call notifyDataSetChanged()
  >> notifies view that data changed
      >> view should refresh itself

Handling Click Events for each item in AdapterView
+ Must implement AdapterView.OnItemClickListener interface

// Create a message handling object as an anonymous class.
private OnItemClickListener mMessageClickedHandler = new OnItemClickListener() {
    public void onItemClick(AdapterView parent, View v, int position, long id) {
        // Do something in response to the click
    }
};

listView.setOnItemClickListener(mMessageClickedHandler);



eg) Big example involving ListFragment and its adapter

public class BDArrayAdapter extends ArrayAdapter<BluetoothDevice> {
    private final Context context;
    private List<BluetoothDevice> items;

    public BDArrayAdapter(Context context, List<BluetoothDevice> objects){
        super(context, R.layout.rows_peers, objects);
        this.context = context;
        this.items = objects;
    }

    public View getView(int position, View convertView, ViewGroup parent){
        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View rowView = inflater.inflate(R.layout.rows_peers, parent, false);
        //do stuff to rowView's views
        TextView device_info = (TextView) rowView.findViewById(R.id.people_name_address);
        BluetoothDevice device = items.get(position);
        device_info.setText(device.getName() + "\n" + device.getAddress());

        return rowView;
    }
}

public class ListPeers extends ListFragment {
    List<BluetoothDevice> pairedDevices = new ArrayList<BluetoothDevice>();
    public ListPeers() {
        // Required empty public constructor
    }


    @Override
    public void onActivityCreated(Bundle savedInstanceState){
        super.onActivityCreated(savedInstanceState);
        this.setListAdapter(new BDArrayAdapter(getActivity(), pairedDevices));
    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_list_peers, container, false);
    }


}

public class BlueToothActivity extends Activity {
  ...
  Set<BluetoothDevice> pairedDevices;

  public void onDiscoverOtherDevices(){
  if (mReceiver == null){
    mReceiver = new BroadcastReceiver() {
      @Override
      public void onReceive(Context context, Intent intent) {
        String action = intent.getAction();
        //If found device
        if (BluetoothDevice.ACTION_FOUND.equals(action)){
          //Add device info
          BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
	  if (pairedDevices.add(device)){
	    
	  };
        }
      }
    };
  }
  registerReceiver(mReceiver, filter);
  }
}
