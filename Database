Androids use SQLite database.

To access a database, useful to use a custom DbAdapter class to help mediate access. 

DbAdapter class should take care of the actual SQL logic.
  (An example at the very end. find( last example ) )

Each app can have its private little DB on phone.



/*********************
	Bare Minimum:
	Members a DbAdapter Class should have:

	[1] SQLiteDatabase member
	
	[2] Context member (for access to actual phone resources
			Basic Classes cannot actually access.
			Need activity's help for that
			)

	[3] DATABASE_NAME, TABLE name, VERSION
	[4] DATABASE_CREATE statement

	[5] Custom DatabaseHelper class that extends SQLiteOpenHelper
		( Helps to create database when first install app
		  Helps to upgrade database (recreate with new version)
		  Needs access to context to access phone resources
		)
*********************/

class MyDbAdapter {
  private SQLiteDatabase mDb;
  
  private static final String DATABASE_CREATE= "create table notes " +
    "(_id integer primary key autoincrement, " +
      "title text not null, body text not null);";
  
  private static final String DATABASE_NAME = "data";
  private static final String DATABASE_TABLE = "my_notes";
  private static final int DATABASE_VERSION = 2;
  
  private final Context mCtx;

  private DatabaseHelper mDbHelper; //extends SQLiteOpenHelper
  
  private static class DatabaseHelper extends SQLiteOpenHelper {
    DatabaseHelper(Context context) {
      super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }
    @Override
    public void onCreate(SQLiteDatabase db) {
      db.execSQL(DATABASE_CREATE);
    }
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
      Log.w(TAG, "Upgrading database from version " + oldVersion + " to "
          + newVersion + ", which will destroy all old data");
          db.execSQL("DROP TABLE IF EXISTS notes");
          onCreate(db);
    }
  }
  
  public MyDbAdapter(Context ctx) {
    this.mCtx = ctx;
  }
  
  public MyDbAdapter open() throws SQLException {
    mDbHelper = new DatabaseHelper(mCtx);
    mDb = mDbHelper.getWritableDatabase();
    return this;
  }
  
  public void close() {
    mDbHelper.close();
  }
}

//above example does not contain methods that alter our database.
If you want to insert, update, delete records, checkout the following methods:
NOTE: you will need a cursor to go through records fetched.


    public long createNote(String title, String body) {
        ContentValues initialValues = new ContentValues();
        initialValues.put(KEY_TITLE, title);
        initialValues.put(KEY_BODY, body);

        return mDb.insert(DATABASE_TABLE, null, initialValues);
    }

    public boolean deleteNote(long rowId) {

        return mDb.delete(DATABASE_TABLE, KEY_ROWID + "=" + rowId, null) > 0;
    }

    public Cursor fetchAllNotes() {

        return mDb.query(DATABASE_TABLE, new String[] {KEY_ROWID, KEY_TITLE,
                KEY_BODY}, null, null, null, null, null);
    }

    public Cursor fetchNote(long rowId) throws SQLException {

        Cursor mCursor =

            mDb.query(true, DATABASE_TABLE, new String[] {KEY_ROWID,
                    KEY_TITLE, KEY_BODY}, KEY_ROWID + "=" + rowId, null,
                    null, null, null, null);
        if (mCursor != null) {
            mCursor.moveToFirst();
        }
        return mCursor;

    }

    public boolean updateNote(long rowId, String title, String body) {
        ContentValues args = new ContentValues();
        args.put(KEY_TITLE, title);
        args.put(KEY_BODY, body);

        return mDb.update(DATABASE_TABLE, args, KEY_ROWID + "=" + rowId, null) > 0;
    }




eg) last example NotesDbAdapter class. To see uses, find( last example uses)

package com.example.bimbim.notepadv2;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.sql.SQLException;

/**
 * Created by bimbim on 10/10/14.
 */
public class NotesDbAdapter {
    public static final String KEY_TITLE="title";
    public static final String KEY_BODY = "body";
    public static final String KEY_ROWID = "_id";

    /*TAG for use in logging */
    private static final String TAG = "NotesDbAdapter";

    private DatabaseHelper mDbHelper;
    private SQLiteDatabase mDb;

    private static final String DATABASE_CREATE=
            "create table notes (_id integer primary key autoincrement," +
                    "title text not null, body text not null);";
    private static final String DATABASE_NAME = "data";
    private static final String DATABASE_TABLE = "notes";
    private static final int DATABASE_VERSION = 2;

    private final Context mCtx;

    private static class DatabaseHelper extends SQLiteOpenHelper {

        DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            db.execSQL(DATABASE_CREATE);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.w(TAG, "Upgrading database from version " + oldVersion + " to version " + newVersion+". This will delete " +
                    "all old content.");
            db.execSQL("DROP TABLE IF EXISTS notes");
            onCreate(db);
        }
    }
    /*
    Constructor- takes the context to allow database to be opened/created

    @param ctx the Context within which to work
     */
    public NotesDbAdapter(Context ctx){
        mCtx = ctx;
    }

    /*
    Open the notes database. If it cannot be opened try to create new instance of database.
    If it cannot be created, throw SQLException to signal the failure

    @return this (self reference, allows this to be chained in an initialization call

    @throws SQLException if dabase can neither be opened nor created
     */
    public NotesDbAdapter open() throws SQLException {
        mDbHelper = new DatabaseHelper(mCtx);
        mDb = mDbHelper.getWritableDatabase();
        return this;
    }

    public void close(){
        mDbHelper.close();
    }

    /*
    Create a new note from the title and body provided.
    Returns new rowId if successful insert, -1 if failed to insert.

    @param title the title of the note
    @param body the body of the note

    @return rowId if success, else -1 if failed.
     */
    public long createNote(String title, String body){
        ContentValues initialValues = new ContentValues();
        initialValues.put(KEY_TITLE, title);
        initialValues.put(KEY_BODY, body);

        return mDb.insert(DATABASE_TABLE, null, initialValues);
    }
    /*
    Delete the note with the given rowId

    @param rowId id of note to delete
    @return true if deleted, false otherwise.
     */
    public boolean deleteNote(long rowId){
        return mDb.delete(DATABASE_TABLE, KEY_ROWID + "=" + rowId, null) > 0;
    }
    /*
    Return a Cursor over the list of all notes in database

    @return Cursor over all notes
     */
    public Cursor fetchAllNotes(){
        return mDb.query(DATABASE_TABLE, new String[] { KEY_ROWID, KEY_TITLE, KEY_BODY}, null, null, null, null, null);
    }
    /*
    Return Cursor positioned at note that matches rowId

    @param rowId id of note to position Cursor at
    @return Cursor positioned at note if found
    @throws SQLException if note could not be found
     */
    public Cursor fetchNote(long rowId) throws SQLException {
        Cursor mCursor = mDb.query(DATABASE_TABLE, new String[] { KEY_ROWID, KEY_TITLE, KEY_BODY},
                KEY_ROWID + "=" + rowId, null, null, null, null);
        if (mCursor != null){
            mCursor.moveToFirst();
        }
        return mCursor;
    }

    /*
    Update the note using details provided.
    Note id is specified by rowId. Note is altered by title and body values passed in.

    @param rowId id of note to update
    @param title value to set note title to
    @param body value to set note body to
    @return true if note was successfully updated, else returns false otherwise.
     */
    public boolean updateNote(long rowId, String title, String body){
        ContentValues args = new ContentValues();
        args.put(KEY_TITLE, title);
        args.put(KEY_BODY, body);

        return mDb.update(DATABASE_TABLE, args, KEY_ROWID + "=" + rowId, null) > 0;
    }
}

eg) last example uses


public class Notepadv2 extends ListActivity {
	...
	
    private NotesDbAdapter mDbHelper;
    private Cursor mNotesCursor;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.notes_list);
        mDbHelper = new NotesDbAdapter(this);
        try {
            mDbHelper.open();
        } catch (SQLException e){

        };
        fillData();
        //each list item can activate the context menu
        registerForContextMenu(getListView());
    }
    private void fillData(){
      mNotesCursor = mDbHelper.fetchAllNotes();
      startManagingCursor(mNotesCursor);

      String[] from = new String[] { NotesDbAdapter.KEY_TITLE};
        //R.id.text1 refers to receptacle for data
      int[] to = new int[] {R.id.text1};

      SimpleCursorAdapter notes =
              new SimpleCursorAdapter(this, R.layout.notes_row, mNotesCursor, from, to);

      setListAdapter(notes);
    }
    @Override
    public boolean onMenuItemSelected(int featureId, MenuItem item){
        switch(item.getItemId()){
            case INSERT_ID:
                createNote();
                return true;
            case R.id.menu_insert:
                createNote();
                return true;
        }
        return super.onMenuItemSelected(featureId, item);
    }
    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo){
        super.onCreateContextMenu(menu, v, menuInfo);
        menu.add(0, DELETE_ID, 0, R.string.menu_delete);
    }

    @Override
    public boolean onContextItemSelected(MenuItem item){
        switch (item.getItemId()){
            case DELETE_ID:
                AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
                mDbHelper.deleteNote(info.id);
                fillData();
                return true;
        }
        return super.onContextItemSelected(item);
    }
    private void createNote(){
        Intent i = new Intent(this, NoteEdit.class);
        startActivityForResult(i, ACTIVITY_CREATE);
    }

    @Override
    protected void onListItemClick(ListView l, View v, int position, long id){
        super.onListItemClick(l, v, position, id);
        //Cursor will point to note that user clicks on
        Cursor c  = mNotesCursor;
        c.moveToPosition(position);
        Intent i = new Intent(this, NoteEdit.class);
        //retrieve information from note cursor pointst o
        //use putExtra to pass in rowId, title, and body of note we want to edit to NoteEdit stage
        i.putExtra(NotesDbAdapter.KEY_ROWID, id);
        i.putExtra(NotesDbAdapter.KEY_TITLE, c.getString(
                c.getColumnIndexOrThrow(NotesDbAdapter.KEY_TITLE)));
        i.putExtra(NotesDbAdapter.KEY_BODY, c.getString(
                c.getColumnIndexOrThrow(NotesDbAdapter.KEY_BODY)));
        startActivityForResult(i, ACTIVTY_EDIT);
    }
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent intent){
        super.onActivityResult(requestCode, resultCode, intent);
        Bundle extras = intent.getExtras();
        switch(requestCode){
            case ACTIVITY_CREATE:
                String title = extras.getString(NotesDbAdapter.KEY_TITLE);
                String body = extras.getString(NotesDbAdapter.KEY_BODY);
                mDbHelper.createNote(title, body);
                fillData();
                break;
            case ACTIVTY_EDIT:
                Long mRowId = extras.getLong(NotesDbAdapter.KEY_ROWID);
                if (mRowId != null) {
                    String editTitle = extras.getString(NotesDbAdapter.KEY_TITLE);
                    String editBody = extras.getString(NotesDbAdapter.KEY_BODY);
                    mDbHelper.updateNote(mRowId, editTitle, editBody);
                }
                fillData();
                break;
        }
    }
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
}

