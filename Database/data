SEE: ./examples for some sql queries that create, update, destroy, fetch
SEE: ./NotesDbAdapter.java for example of NotesDbAdapter
SEE: ./Notepadv2.java for example of how to use NotesDbAdapter


Androids use SQLite database.

To access a database, useful to use a custom DbAdapter class to help mediate access. 

DbAdapter class should take care of the actual SQL logic.
  (An example at the very end. find( last example ) )

Each app can have its private little DB on phone.



/*********************
	Bare Minimum:
	Members a DbAdapter Class should have:

	[1] SQLiteDatabase member
	
	[2] Context member (for access to actual phone resources
			Basic Classes cannot actually access.
			Need activity's help for that
			)

	[3] DATABASE_NAME, TABLE name, VERSION
	[4] DATABASE_CREATE statement

	[5] Custom DatabaseHelper class that extends SQLiteOpenHelper
		( Helps to create database when first install app
		  Helps to upgrade database (recreate with new version)
		  Needs access to context to access phone resources
		)
*********************/

class MyDbAdapter {
  private SQLiteDatabase mDb;
  
  private static final String DATABASE_CREATE= "create table notes " +
    "(_id integer primary key autoincrement, " +
      "title text not null, body text not null);";
  
  private static final String DATABASE_NAME = "data";
  private static final String DATABASE_TABLE = "my_notes";
  private static final int DATABASE_VERSION = 2;
  
  private final Context mCtx;

  private DatabaseHelper mDbHelper; //extends SQLiteOpenHelper
  
  private static class DatabaseHelper extends SQLiteOpenHelper {
    DatabaseHelper(Context context) {
      super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }
    @Override
    public void onCreate(SQLiteDatabase db) {
      db.execSQL(DATABASE_CREATE);
    }
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
      Log.w(TAG, "Upgrading database from version " + oldVersion + " to "
          + newVersion + ", which will destroy all old data");
          db.execSQL("DROP TABLE IF EXISTS notes");
          onCreate(db);
    }
  }
  
  public MyDbAdapter(Context ctx) {
    this.mCtx = ctx;
  }
  
  public MyDbAdapter open() throws SQLException {
    mDbHelper = new DatabaseHelper(mCtx);
    mDb = mDbHelper.getWritableDatabase();
    return this;
  }
  
  public void close() {
    mDbHelper.close();
  }
}

//above example does not contain methods that alter our database.
If you want to insert, update, delete records, checkout the following methods:
NOTE: you will need a cursor to go through any records fetched.
SEE: ./examples for some sql queries that create, update, destroy, fetch
SEE: ./NotesDbAdapter.java for example of NotesDbAdapter
SEE: ./Notepadv2.java for example of how to use NotesDbAdapter
